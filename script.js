// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const grid = document.getElementById('gameGrid');
const infoSeedlings = document.getElementById('seedlings');
const infoCoins = document.getElementById('coins');
const infoScore = document.getElementById('score');
const levelProgress = document.getElementById('levelProgress');
const toast = document.getElementById('toast');
const loading = document.getElementById('loading');
const celebration = document.getElementById('celebration');
const rainContainer = document.createElement('div');
const snowContainer = document.createElement('div');
rainContainer.className = 'rain';
snowContainer.className = 'snow';
document.body.appendChild(rainContainer);
document.body.appendChild(snowContainer);

let level = 1;
let seedlings = 5; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–∂–µ–Ω—Ü–µ–≤
let coins = 0; // –ú–æ–Ω–µ—Ç—ã
let score = 0;
const gridSize = 6;
let gameState = [];
let weatherTimeout = null;

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
const plantSound = new Audio('assets/audio/plant.mp3');
const growSound = new Audio('assets/audio/grow.mp3');
const levelUpSound = new Audio('assets/audio/levelup.mp3');
const buySound = new Audio('assets/audio/buy.mp3');
const thunderSound = new Audio('assets/audio/thunder.mp3');
const rainSound = new Audio('assets/audio/rain.mp3');
const blizzardSound = new Audio('assets/audio/blizzard.mp3');

// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞ –ø–æ–∫—É–ø–∫–∏
buySound.volume = 0.5; // –£–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤ –¥–≤–∞ —Ä–∞–∑–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
    const saved = localStorage.getItem('forestGameProgress');
    if (saved) {
        const data = JSON.parse(saved);
        level = data.level || 1;
        seedlings = data.seedlings || 5;
        coins = data.coins || 0;
        score = data.score || 0;
    }
    startLevel();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
    const data = { level, seedlings, coins, score };
    localStorage.setItem('forestGameProgress', JSON.stringify(data));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
function startLevel() {
    grid.innerHTML = '';
    gameState = [];
    const fertileCount = Math.min(3 + level, gridSize * gridSize - 1);
    const fertileSpots = generateFertileSpots(fertileCount);

    for (let i = 0; i < gridSize; i++) {
        gameState[i] = [];
        for (let j = 0; j < gridSize; j++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            if (fertileSpots.some(([x, y]) => x === i && y === j)) {
                cell.classList.add('fertile');
                cell.textContent = ''; // –ü—É—Å—Ç–∞—è –ø–ª–æ–¥–æ—Ä–æ–¥–Ω–∞—è –∑–µ–º–ª—è
            } else {
                cell.classList.add('unfertile');
                cell.textContent = ''; // –ü—É—Å—Ç–∞—è –Ω–µ–ø–ª–æ–¥–æ—Ä–æ–¥–Ω–∞—è –∑–µ–º–ª—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            }
            cell.dataset.row = i;
            cell.dataset.col = j;
            cell.addEventListener('click', handleClick);
            grid.appendChild(cell);
            gameState[i][j] = { fertile: !!cell.classList.contains('fertile'), content: cell.classList.contains('fertile') ? 'fertile' : 'unfertile' };
        }
    }
    seedlings = Math.max(3, 5 - level);
    coins = Math.max(0, coins - (5 - seedlings) * 2);
    updateProgress();
    updateInfo();
    saveProgress();
    startWeatherEvents();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–æ–¥–æ—Ä–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
function generateFertileSpots(count) {
    const spots = [];
    while (spots.length < count) {
        const x = Math.floor(Math.random() * gridSize);
        const y = Math.floor(Math.random() * gridSize);
        if (!spots.some(([sx, sy]) => sx === x && sy === y)) {
            spots.push([x, y]);
        }
    }
    return spots;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
function handleClick(event) {
    const row = parseInt(event.target.dataset.row);
    const col = parseInt(event.target.dataset.col);
    const cell = event.target;

    if (seedlings > 0 && gameState[row][col].fertile && gameState[row][col].content === 'fertile') {
        cell.textContent = 'üå±'; // –†–æ—Å—Ç–∫–∏
        gameState[row][col].content = 'sapling';
        seedlings--;
        plantSound.play();
        setTimeout(() => {
            cell.textContent = 'üå≤'; // –ú–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ—Ä–µ–≤—å—è
            cell.classList.add('small-tree');
            gameState[row][col].content = 'small-tree';
            growSound.play();
            setTimeout(() => {
                cell.textContent = 'üå≥'; // –ë–æ–ª—å—à–∏–µ –¥–µ—Ä–µ–≤—å—è
                cell.classList.remove('small-tree');
                cell.classList.add('tree');
                gameState[row][col].content = 'tree';
                score += 5;
                coins += 5;
                checkLevelEnd();
                updateProgress();
                updateInfo();
            }, 2000); // –ï—â—ë 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ –±–æ–ª—å—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤
        }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤
    } else if (gameState[row][col].content === 'lightning') {
        cell.textContent = ''; // –£–±–∏—Ä–∞–µ–º –º–æ–ª–Ω–∏—é
        cell.classList.remove('lightning');
        gameState[row][col].content = 'fertile';
        stopWeather();
    } else if (gameState[row][col].content === 'frozen') {
        cell.textContent = ''; // –£–±–∏—Ä–∞–µ–º —Å–Ω–µ–∂–∏–Ω–∫—É
        cell.classList.remove('frozen');
        gameState[row][col].content = 'fertile';
        stopWeather();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —É—Ä–æ–≤–Ω—è
function checkLevelEnd() {
    const treesLeft = gameState.flat().filter(cell => cell.content === 'tree').length;
    if (treesLeft >= 3 + level) {
        levelUp();
    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function levelUp() {
    loading.classList.remove('hidden');
    levelUpSound.play();
    setTimeout(() => {
        loading.classList.add('hidden');
        level++;
        seedlings = Math.max(3, 5 - level);
        coins = Math.max(0, coins - (5 - seedlings) * 2);
        score += 10;
        celebrateLevelUp();
        saveProgress();
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã "–∑–∞–≥—Ä—É–∑–∫–∏"
}

// –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function celebrateLevelUp() {
    celebration.classList.remove('hidden');
    celebration.innerHTML = '<span>–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! ‚≠ê</span>';
    // –§–µ–π–µ—Ä–≤–µ—Ä–∫ –∏–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫
    for (let i = 0; i < 20; i++) {
        const star = document.createElement('span');
        star.textContent = '‚≠ê';
        star.style.left = `${Math.random() * 100}vw`;
        star.style.top = `${Math.random() * 100}vh`;
        star.style.animationDelay = `${Math.random() * 1}s`;
        celebration.appendChild(star);
    }
    // –ú—è–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    if ('vibrate' in navigator) {
        vibrateDuringFireworks();
    }
    setTimeout(() => {
        celebration.classList.add('hidden');
        celebration.innerHTML = '';
        startLevel();
    }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
function vibrateDuringFireworks() {
    let vibrationInterval = setInterval(() => {
        if ('vibrate' in navigator) {
            navigator.vibrate(200); // –ú—è–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è 200 –º—Å
        }
    }, 500); // –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 500 –º—Å
    setTimeout(() => {
        clearInterval(vibrationInterval);
        if ('vibrate' in navigator) {
            navigator.vibrate(0); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–±—Ä–∞—Ü–∏—é
        }
    }, 3000);
}

// –î–æ–∫—É–ø–∫–∞ —Å–∞–∂–µ–Ω—Ü–µ–≤ –∑–∞ –º–æ–Ω–µ—Ç—ã
function buySeedlings() {
    if (coins >= 2) {
        coins -= 2;
        seedlings += 1;
        buySound.play();
        showToast('–°–∞–∂–µ–Ω–µ—Ü –∫—É–ø–ª–µ–Ω –∑–∞ 2 üí∞!');
        updateInfo();
    } else {
        showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 2 üí∞ –∑–∞ —Å–∞–∂–µ–Ω–µ—Ü.');
    }
}

// –ü–æ–∫–∞–∑ —Ç–æ—Å—Ç–∞
function showToast(message) {
    toast.textContent = message;
    toast.style.display = 'block';
    setTimeout(() => {
        toast.style.display = 'none';
    }, 3000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
function updateProgress() {
    const treesNeeded = 3 + level;
    const treesLeft = gameState.flat().filter(cell => cell.content === 'tree').length;
    levelProgress.value = treesLeft;
    levelProgress.max = treesNeeded;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function updateInfo() {
    infoSeedlings.textContent = seedlings;
    infoCoins.textContent = coins;
    infoScore.textContent = score;
    document.getElementById('current-level').textContent = `–£—Ä–æ–≤–µ–Ω—å: ${level}`;
}

// –°—Ç–∞—Ä—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
function startWeatherEvents() {
    if (weatherTimeout) clearTimeout(weatherTimeout);
    weatherTimeout = setTimeout(checkWeather, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã (—Ä–µ–¥–∫–∏–µ —Å–æ–±—ã—Ç–∏—è)
function checkWeather() {
    const chance = Math.random();
    if (chance < 0.10) { // 1% —à–∞–Ω—Å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
        const eventType = Math.random() < 0.5 ? 'lightning' : 'frozen';
        const fertileCells = gameState.flat().filter(cell => cell.fertile && (cell.content === 'sapling' || cell.content === 'small-tree'));
        if (fertileCells.length > 0) {
            const randomCell = fertileCells[Math.floor(Math.random() * fertileCells.length)];
            const [row, col] = [randomCell.row, randomCell.col];
            const cell = grid.children[row * gridSize + col];
            if (eventType === 'lightning') {
                cell.textContent = '‚ö°';
                cell.classList.add('lightning');
                gameState[row][col].content = 'lightning';
                showRain();
            } else {
                cell.textContent = '‚ùÑ';
                cell.classList.add('frozen');
                gameState[row][col].content = 'frozen';
                showSnow();
            }
        }
    }
    weatherTimeout = setTimeout(checkWeather, 5000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
}

// –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–∂–¥—è
function showRain() {
    rainContainer.innerHTML = '';
    thunderSound.play();
    rainSound.play();
    for (let i = 0; i < 50; i++) {
        const drop = document.createElement('span');
        drop.className = 'drop';
        drop.textContent = 'üíß';
        drop.style.left = `${Math.random() * 100}vw`;
        drop.style.animationDelay = `${Math.random() * 2}s`;
        rainContainer.appendChild(drop);
    }
    setTimeout(stopWeather, 5000); // –î–æ–∂–¥—å –¥–ª–∏—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥
}

// –ò–º–∏—Ç–∞—Ü–∏—è —Å–Ω–µ–≥–∞
function showSnow() {
    snowContainer.innerHTML = '';
    blizzardSound.play();
    for (let i = 0; i < 50; i++) {
        const flake = document.createElement('span');
        flake.className = 'flake';
        flake.textContent = '‚ùÑ';
        flake.style.left = `${Math.random() * 100}vw`;
        flake.style.animationDelay = `${Math.random() * 2}s`;
        snowContainer.appendChild(flake);
    }
    setTimeout(stopWeather, 5000); // –°–Ω–µ–≥ –¥–ª–∏—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function stopWeather() {
    rainContainer.innerHTML = '';
    snowContainer.innerHTML = '';
    thunderSound.pause();
    thunderSound.currentTime = 0;
    rainSound.pause();
    rainSound.currentTime = 0;
    blizzardSound.pause();
    blizzardSound.currentTime = 0;
}

// –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã
loadProgress();